import { FilterParams, IOpenable } from 'pip-services3-commons-nodex';
import { PagingParams } from 'pip-services3-commons-nodex';
import { DataPage } from 'pip-services3-commons-nodex';
import { ConfigParams } from 'pip-services3-commons-nodex';
import { IConfigurable } from 'pip-services3-commons-nodex';
import { IReferences } from 'pip-services3-commons-nodex';
import { IReferenceable } from 'pip-services3-commons-nodex';
import { CommandSet } from 'pip-services3-commons-nodex';
import { ICommandable } from 'pip-services3-commons-nodex';
import { JobV1 } from '../../src/data/version1/JobV1';
import { IJobsController } from './IJobsController';
import { NewJobV1 } from '../data/version1/NewJobV1';
export declare class JobsController implements IJobsController, IConfigurable, IReferenceable, ICommandable, IOpenable {
    private _persistence;
    private _commandSet;
    private _opened;
    private _timer;
    private _config;
    private _cleanInterval;
    private _maxRetries;
    private _logger;
    constructor();
    configure(config: ConfigParams): void;
    open(correlationId: string): Promise<void>;
    isOpen(): boolean;
    close(correlationId: string): Promise<void>;
    setReferences(references: IReferences): void;
    getCommandSet(): CommandSet;
    addJob(correlationId: string, newJob: NewJobV1): Promise<JobV1>;
    addUniqJob(correlationId: string, newJob: NewJobV1): Promise<JobV1>;
    getJobs(correlationId: string, filter: FilterParams, paging: PagingParams): Promise<DataPage<JobV1>>;
    getJobById(correlationId: string, jobId: string): Promise<JobV1>;
    startJobById(correlationId: string, jobId: string, timeout: number): Promise<JobV1>;
    startJobByType(correlationId: string, jobType: string, timeout: number): Promise<JobV1>;
    extendJob(correlationId: string, jobId: string, timeout: number): Promise<JobV1>;
    abortJob(correlationId: string, jobId: string): Promise<JobV1>;
    completeJob(correlationId: string, jobId: string): Promise<JobV1>;
    deleteJobById(correlationId: string, jobId: string): Promise<JobV1>;
    deleteJobs(correlationId: string, callback?: (err: any) => void): Promise<void>;
    cleanJobs(correlationId: string): Promise<void>;
}
